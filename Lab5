### Module 5: Working with Relational Data Stores in the Cloud

@@@secondary
**Lab overview**

The students will be able to provision an Azure SQL Database and Azure Synapse Analytics server and be able to issue queries against one of the instances that are created. They will be also be able to integrate a data warehouse with a number of other data platform technologies and use PolyBase to load data from one data source into Azure Synapse Analytics.

**Lab objectives**
  
After completing this lab, you will be able to:

1. Use Azure SQL Database
1. Describe Azure Synapse Analytics 
1. Creating and Querying an Azure Synapse Analytics 
1. Using PolyBase to Load Data into Azure Synapse Analytics 

**Scenario**
  
You are the senior data engineer at AdventureWorks, and you are working with your team to transition a relational database system from an on-premises SQL Server to a Azure SQL Database located in Azure. You will begin by creating an instance of Azure SQL Database with the company's sample database. Your intention is to hand this instance of to a junior data engineer to perform some testing of departmental databases.

You will then provision Azure Synapse Analytics server and test that the provisioning of the server is successful by testing a sample database with a series of queries. You will then use PolyBase to load a dimension table from Azure Blob to test that the integration of this data platform technology with Azure Synapse Analytics.

At the end of this lad, you will have:

1. Use Azure SQL Database
1. Describe Azure Synapse Analytics 
1. Creating and Querying an Azure Synapse Analytics 
1. Using PolyBase to Load Data into Azure Synapse Analytics 
@@@

@@@danger
**IMPORTANT**: As you go through this lab, make a note of any issue(s) that you have encountered in any provisioning or configuration tasks and log it in the table in the document located at C:\Labfiles\DP-200-Issues-Doc.docx_. Document the Lab number, note the technology, Describe the issue, and what was the resolution. Save this document as you will refer back to it in a later module.

@@@

#### Exercise 1: Use Azure SQL Database

@@@secondary
The main task for this exercise are as follows:

1. [ ] Create and configure a SQL Database instance.
@@@

#### Task 0: Download the lab files.

1. [ ] From the lab virtual machine, click **Start** and search for **PowerShell** then open **PowerShell as Administrator**.

1. [ ] Run the following commands to download the latest version of the lab files to the virtual machine.
@@@warning
**Note**: If any of the commands fail run them again until they are succesfull.
@@@


 ```powershell
New-Item -Path "C:\" -Name "LabFiles" -ItemType "directory"
 ```
 ```powershell
Import-Module -Name BitsTransfer
 ```
  ```powershell
Start-BitsTransfer -Source 'https://github.com/MicrosoftLearning/DP-200-Implementing-an-Azure-Data-Solution/archive/master.zip' -Destination C:\LabFiles
 ```
 ```powershell
Expand-Archive -Path 'C:\LabFiles\master.zip' -DestinationPath 'C:\LabFiles'
 ```
  ```powershell
Move-item -Path "C:\LabFiles\DP-200-Implementing-an-Azure-Data-Solution-master\LabFiles\*" -Destination "C:\LabFiles" -confirm:$false
 ```

##### Task 1: Create and configure a SQL Database instance.

1. [ ] In the Azure portal, navigate to the **+ Create a resource** blade.

1. [ ] In the New screen, click the **Search the Marketplace** text box, and type the word **SQL Database**. Click **SQL Database** in the list that appears.

1. [ ] In the **SQL Database** screen, click **Create**.

1. [ ] From the **Create SQL Database** screen, create an Azure SQL Database with the following settings:

    - In the Project details section, type in the following information
    
        - **Subscription**: the name of the subscription you are using in this lab

        - **Resource group**: **awrgstudx-XXXXXX**

    - Click on the  **Additional setting** tab, click **Sample** . The AdventureworksLT sample database is selected automatically. 
    
    - Click the **Basics** tab once this has been done.
    
    - In the Database details section, type in the following information
    
        - Database name: type in **AdventureworksLT**
     
        - Server: Create a new server by clicking **Create new** with the following settings and click on **OK**:
            - **Server name**: **sqlservicexx**, where **xx** are your initials
            - **Server admin login**: **xxsqladmin**, where **xx** are your initials
            - **Password**: **Pa55w.rd**
            - **Confirm Password**: **Pa55w.rd**
            - **Location**: choose a **location** near to you.
            - click on **OK**

                ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/f40263a2-58fe-4f44-a7d3-b03f27a95821.png)

            - Leave the remaining settings to their defaults, and then click on **OK**
            

    ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/77b75b98-07bb-461c-9093-24bd329fadfc.png)

1. [ ] In the **Create SQL Database** blade, click **Review + create**.

1. [ ] After the validation of the **Create SQL Database*** blade, click **Create**.
@@@warning
**Note**: The provision will takes approximately 4 minutes.
@@@

@@@success
**Result**: After you completed this exercise, you have an Azure SQL Database instance
@@@

#### Exercise 2: Describe Azure Synapse Analytics
  
@@@secondary
The main tasks for this exercise are as follows:

1. Create and configure a Azure Synapse Analytics instance.

1. Configure the Server Firewall

1. Pause the warehouse database
@@@

##### Task 1: Create and configure a Azure Synapse Analytics instance.

1. [ ] In the Azure portal, clikc on the link **home** at the top left of the screen.

1. [ ] In the Azure portal, click **+ Create a resource**.

1. [ ] In the New blade, navigate to the **Search the Marketplace** text box, and type the word **Synapse**. Click **Azure Synapse Analytics (formerly SQL DW)** in the list that appears.

1. [ ] In the **Azure Synapse Analytics (formerly SQL DW)** blade, click **Create**.

1. [ ] From the **SQL Data Warehouse** blade, create an Azure Synapse Analytics  with the following settings:

    - In the Project details section, type in the following information

        - **Subscription**: the name of the subscription you are using in this lab

        - **Resource group**: **awrgstud-XXXXXXx**

    - In **Additional setting** tab, under data source, click **Sample**.

    - Click the **Basics** tab once this has been done.
    
    - In the Database details section, type in the following information

        - **Database warehouse name**: **Warehousexx**, where **xx** are your initials.

        - **Server**: Create a new server by clicking **Create new** with the following settings and click on **OK**:
            - **Server name**: **dwhservicexx**, where **xx** are your initials
            - **Server admin login**: **xxsqladmin**, where **xx** are your initials
            - **Password**: **Pa55w.rd**
            - **Confirm Password**: **Pa55w.rd**
            - **Location**: choose a **location** near to you.
            - Select the checkbox to Allow Azure services to access server
            - click on **OK**

                ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/72736e44-fa68-4f00-9832-d27196b720b4.png)

    - Performance Level: Click **Select performance level** and select **Gen2 DW100C**.

        ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/619bedf1-2755-46de-ad62-1eba22d56197.png)

    - Click **Apply**. the following configuration is shown.

        ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/be77fe70-f242-4274-ae42-3cae99e29928.png)

1. [ ] In the **SQL Data Warehouse** screen, click **Review + create**.

1. [ ] In the **SQL Data Warehouse** blade, click **Create**.
@@@warning
**Note**: The provision will takes approximately 7 minutes.
@@@

##### Task 2: Configure the Server Firewall

1. [ ] In the Azure portal, in the blade, click **Resource groups**, and then click **awrgstud-XXXXXX**, and then click on **awdlsstudxx**, where **xx** are your initials

1. [ ] Click on **dwhservicexx**, where **xx** are your initials.

1. [ ] In the **dwhservicexx** screen, click on **Firewalls and virtual networks**.

1. [ ] In the dwhservicexx - Firewalls and virtual networks screen, click on the option **+ Add client IP**, and then click on **Save**. On the success screen click **OK**.
@@@warning
**Note**: You will receive a message stating that the the server firewall rules have been successfully updated
@@@

    ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/086a3bfc-3787-4ea2-8992-0fd2529caf35.png)

    

1. [ ] Close down the Firewalls and virtual networks screen.

@@@success
**Result**: After you completed this exercise, you have created an Azure  Synapse Analytics  instance and configures the server firewall to enable connections against it.
@@@

##### Task 3: Pause the Warehousexx database

1. [ ] Click on **Warehousexx**, where **xx** are your initials.

1. [ ] In the **Warehousexx (dwhservicexx/Warehousexx)** screen, click on **Pause**.

1. [ ] In the Pause Warehousexx screen, click **Yes**



#### Exercise 3: Creating an Azure Synapse Analytics database and tables

@@@secondary
The main tasks for this exercise are as follows:

1. Install SQL Server Management Studio and connect to a data warehouse instance.

1. Create a SQL Data Warehouse database

1. Create SQL Data Warehouse tables
@@@

@@@warning
**Note**: If you are not familiar with Transact-SQL, statements are available for the following labs in the following location **C:\Labfiles\Starter\DP-200.5\SQL DW Files**
@@@

##### Task 1: Install SQL Server Management Studio and connect to a SQL Data Warehouse instance.

1. [ ] In the Azure Portal, in the **dwhservicexx - Firewalls and virtual networks**, in the blade, click on **Properties**

1. [ ] Copy the **"Server name"** and paste it into Notepad.

1. [ ] Download SQL Server Management Studio and install onto your machine:

 ```cli
https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017
 ```

1. [ ] On the windows desktop, click on the **Start**, and type **"SQL Server"** and then click on **MIcrosoft SQL Server Management Studio 17**

1. [ ] In the **Connect to Server** dialog box, fill in the following details
    - Server Name: **dwhservicexx.database.windows.net**
    - Authentication: **SQL Server Authentication**
    - Username: **xxsqladmin**
    - Password: **Pa55w.rd**
</br>

1. [ ] In the **Connect to Server** dialog box, click **Connect** 

##### Task 2: Create a SQL Data Warehouse database.

1. [ ] In **SQL Server Management Studio**, in Object Explorer, right click **dwhservicexx.database.windows.net** and click on **New Query**. 

1. [ ] In the query window, create a DataWarehouse database named **DWDB**, with a service objective of DW100 and a maximum size of 1024GB.

    ```SQL
    CREATE DATABASE DWDB COLLATE SQL_Latin1_General_CP1_CI_AS
    (
        EDITION             = 'DataWarehouse'
    ,   SERVICE_OBJECTIVE   = 'DW100C'
    ,   MAXSIZE             = 1024 GB
    );
    ```

@@@warning
**Note**: The creation of the database takes approximately 2 minutes.
@@@


##### Task 3: Create SQL Data Warehouse tables.

1. [ ] In **SQL Server Management Studio**, in Object Explorer, right click **dwhservicexx.database.windows.net** and click on **New Query**.

1. [ ] In **SQL Server Management Studio**, in SQL Editor toolbar, in **Available Databases**, click on **DWDB**.

    >**Note**: If you are unfamiliar with Transact-SQL, there is a script in the Allfiles\Solution\DP-200.5\folder named **Exercise3 Task3Step2 script.sql**. It contains the bulk of the code required to create the tables, but you do have to complete the code by selecting the distribution type to use for each table 

1. [ ] Create a table named **dbo.Users** with a **clustered columnstore** index with a distribution of **replicate** with the following columns:

    | column name | data type | Nullability|
    |-------------|-----------|------------|
    | userId | int | NULL|
    | City | nvarchar(100) | NULL|
    | Region | nvarchar(100) | NULL|
    | Country | nvarchar(100) | NULL|

1. [ ] In **SQL Server Management Studio**, click on **Execute**.

1. [ ] In **SQL Server Management Studio**, in Object Explorer, right click **dwhservicexx.database.windows.net** and click on **New Query**.

1. [ ] In **SQL Server Management Studio**, in SQL Editor toolbar, in **Available Databases**, click on **DWDB**.

1. [ ] Create a table named **dbo.Products** with a **clustered columnstore** index with a distribution of **round robin** with the following columns:

    | column name | data type | Nullability|
    |-------------|-----------|------------|
    | ProductId | int | NULL|
    | EnglishProductName | nvarchar(100) | NULL|
    | Color | nvarchar(100) | NULL|
    | StandardCost | int | NULL|
    | ListPrice | int | NULL|
    | Size | nvarchar(100) | NULL|
    | Weight | int | NULL|
    | DaysToManufacture | int | NULL|
    | Class | nvarchar(100) | NULL|
    | Style | nvarchar(100) | NULL|

1. [ ] In **SQL Server Management Studio**, click on **Execute**.

1. [ ] In **SQL Server Management Studio**, in Object Explorer, right click **dwhservicexx.database.windows.net** and click on **New Query**.

1. [ ] In **SQL Server Management Studio**, in SQL Editor toolbar, in **Available Databases**, click on **DWDB**.

1. [ ] Create a table named **dbo.FactSales** with a **clustered columnstore** index with a distribution of **Hash** on the **SalesUnit** with the following columns:

    | column name | data type | Nullability|
    |-------------|-----------|------------|
    | DateId | int | NULL|
    | ProductId | int | NULL|
    | UserId | int | NULL|
    | UserPreferenceId | int | NULL|
    | SalesUnit | int | NULL|

1. [ ] In **SQL Server Management Studio**, click on **Execute**.

@@@success
**Result**: After you completed this exercise, you have installed SQL Server Management Studio to create a data warhouse named DWDB and three tables named Users, Products and FactSales.
@@@

#### Exercise 4: Using PolyBase to Load Data into Azure Synapse Analytics 

@@@secondary
The main tasks for this exercise are as follows:

1. Create Storage for DataLake

1. Collect Data Lake Storage container and key details

1. Create a dbo.Dates table using PolyBase from Azure Data Lake Storage
@@@

@@@danger
**Note**: You may notice that you have already completed the next 4 tasks in another module.  These steps are required for the last exercise in this lab.
@@@

##### Task 0a: Create and configure a storage account as a Data Lake Store Gen II store.

1. [ ] In the Azure portal, click on **+ Create a resource** icon.

1. [ ] In the New screen, click in the **Search the Marketplace** text box, and type the word **storage**. Click **Storage account** in the list that appears.

1. [ ] In the **Storage account** blade, click **Create**.

1. [ ] From the **Create storage account*** blade, create a storage account with the following settings:

    - Under the project details, specify the following settings:

        - **Subscription**: the name of the subscription you are using in this lab
    
        - **Resource group name**: select **awrgstud-XXXXXX**

    - Under the instance details, specify the following settings:

        - **Storage account name**: **awdlsstudxx**, where **xx** are your initials.

        - **Location**: **EastUS**

        - **Performance**: **Standard**.

        - **Account kind**: **StorageV2 (general purpose v2)**.

        - **Replication**: **Read-access geo-redundant storage (RA_GRS)**

        - **Access tier (default)**: **Hot**.

1. [ ] Click on the **Advanced** tab.

1. [ ] Under Data Lake Storage Gen2, click **Enabled** under **Hierarchical namespace**.

    ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/30ba8fa5-9c32-4f8b-9463-36466207f14e.png)

1. [ ] In the **Create storage account** blade, click **Review + create**.

1. [ ] After the validation of the  **Create storage account*** blade, click **Create**.
@@@warning
**Note**: The creation of the storage account will take approximately 90 seconds while it provisions the disks and the configuration of the disks as per the settings you have defined.
@@@

##### Task 0b: Create and configure a Container within the storage account.

1. [ ] In the Azure portal, a message states that _Your deployment is complete_, click on the button **Go to resource**.

1. [ ] In the **awdlsstudxx** screen, where **xx** are your initials, click **Containers**.

1. [ ] In the **awrgstudxx - Containers** screen, at the top left, click on the  **+ File System** button.

1. [ ] From the **New** screen, create two file systems with the following name:

    - Name: **data**.

    - Name: **logs**

1. [ ] In the **Add file systems*** screen, click **OK**.
@@@warning
**Note**: The creation of the file system is immediate and will appear in the list of the **awdlsstudxx - Containers** screen as follows.
@@@

    ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/7d6e85a9-646e-4375-8de3-9bd9e0ea30f5.png)

@@@success
**Result**: After you completed this exercise, you have created a Data Lake Gen2 Storage account named awdlsstudxx that has a file system named data.
@@@


##### Task 0c: Install Storage Explorer.

@@@secondary
The main task for this exercise are as follows:

1. Install and start Microsoft Azure Storage Explorer

1. Upload some data files to the data container of the Data Lake Gen II Storage Account.
@@@


1. [ ] In the Azure portal, in the **awdlsstudxx - Containers** screen, click on the **data** item in the list.

1. [ ] A screen appears stating Azure Data Lake Storage Gen2 is now available in Storage Explorer, click on the **Download Azure Storage Explorer** hyperlink.

1. [ ] You are taken to the following web page for Azure Storage Explorer **`https://azure.microsoft.com/en-us/features/storage-explore`** where there is a button that states **Download now**. click on this button.

1. [ ] In the Microsoft Edge dialog box click **Save**, when the download is complete, click on **View downloads**, in the download screen in Microsoft Edge, click on **Open folder**. This will open the Downloads folder.

1. [ ] Double click the file **StorageExplorer.exe**, in the User Account Control dialog box click on **Yes**.

1. [ ] In the License Agreement screen, select the radio button next to **I agree the agreement**, and then click on **Install**.
@@@warning
**Note**: The installation of Storage Explorer can take approximately 4 minutes. Azure Storage Explorer allows you to easily manage the contents of your storage account with Azure Storage Explorer. Upload, download, and manage blobs, files, queues, tables, and Cosmos DB entities. It also enables you to gain easy access to manage your virtual machine disks.
@@@

1. [ ] On completion of the installation, ensure that the checkbox next to **Launch Microsoft Azure Storage Explorer** is selected and then click **Finish**. Microsoft Azure Storage Explorer opens up and lists your subscriptions.

1. [ ] In Storage Explorer, select **Manage Accounts** to go to the **Account Management Panel**.

1. [ ] The left pane now displays all the Azure accounts you've signed in to. To connect to another account, select **Add an account**

1. [ ] If you want to sign into a national cloud or an Azure Stack, click on the Azure environment dropdown to select which Azure cloud you want to use. Once you have chosen your environment, click the **Sign in...** button.

1. [ ] After you successfully sign in with an Azure account, the account and the Azure subscriptions associated with that account are added to the left pane. Select the Azure subscriptions that you want to work with, and then select **Apply**. The left pane displays the storage accounts associated with the selected Azure subscriptions.

    ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/607e5816-b4cc-4724-b4b9-a6c58f08eaca.png)

##### Task 0d: Upload data files to the data container of the Data Lake Gen II Storage Account.

1. [ ] In Azure Storage Explorer, click on the arrow to expand your subscription.

1. [ ] Under **Storage Accounts**, search for the storage account **awdlsstudxx (ADLS Gen2)**, and click on the arrow to expand it.

1. [ ] Under **Blob Containers**, click on the arrow to expand it and show the **logs** file system. Click on the **logs** file system.

1. [ ] In Azure Storage Explorer, click on the arrow next to the **Upload** icon, and click on the **Upload Files..**.

1. [ ] In Upload Files dialog box, click on the ellipsis next to the **Selected files** text box.

1. [ ] In the **Choose files to upload** dialog box, browse to **C:\Labfiles\Starter\DP-200.2\logs** folder. Highlight the following files:

    - weblogsQ1.log

    - weblogsQ2.log

    - preferences.json

1. [ ] In the **Choose files to upload** dialog box, click **Open**.

1. [ ] In the **Upload Files** screen, click on the **Upload** button.

   ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/41c05f76-7738-4e47-9d83-d6fed0229116.png)

1. [ ] Under **Blob Containers**, click on the arrow to expand it and show the **data** file system. Click on the **data** file system.

1. [ ] In Azure Storage Explorer, click on the arrow next to the **Upload** icon, and click on the **Upload Files..**.

1. [ ] In Upload Files dialog box, click on the ellipsis next to the **Selected files** text box.

1. [ ] In the **Choose files to upload** dialog box, browse to **C:\Labfiles\Starter\DP-200.2\Static Files** folder. Highlight the following files:

    - DimDate2.txt

1. [ ] In the **Choose files to upload** dialog box, click **Open**.

1. [ ] In the **Upload Files** screen, click on the **Upload** button.

1. [ ] Repeat the steps to upload the preferences.JSON file from the **C:\Labfiles\Starter\DP-200.2\logs** folder to the **data** file system in the Data Lake Store gen2
@@@warning
**Note**: The upload of the files will take approximately 5 seconds. You will see a message in Azure Storage Explorer that states **Your view may be out of data. Do you want to refresh? Click Yes**. Once completed, all two files will appear in a list in the upload blobs screen.
@@@

    ![Screenshot](https://godeployblob.blob.core.windows.net//labguideimages/DP-200/Lab/76e3ea5b-8582-40db-beab-213c442842d8.png)

1. [ ] In Azure Storage Explorer, in the data file system, click on the **+ New Folder** button.

1. [ ] In the New Folder screen, in the New folder name text box, type **output**.

1. [ ] Close down Azure Storage Explorer.

1. [ ] Return to the Azure portal, and navigate to the **Home** blade.


@@@success
**Result**: After you completed this exercise, you have created a Data Lake Gen II Storage account named awdlsstudxx that has a file system named data that contains two weblog files that are ready to be used by the Data scientists at AdventureWorks.
@@@

##### Task 1: Collect Azure Blob account name and key details

1. [ ] In the Azure portal, click on **Resource groups** and then click on **awrgstud-XXXXXX**, and then click on **awdlsstudxx** where xx are the initials of your name.

1. [ ] In the **awdlsstudxx** screen, click **Access keys**. Click on the icon next to the **Storage account name** and paste it into Notepad.

1. [ ] In the **awdlsstudxx - Access keys** screen, under **key1**, Click on the icon next to the **Key** and paste it into Notepad.

##### Task 2: Create a dbo.Dates table using PolyBase from Azure Blob

1. [ ] In **SQL Server Management Studio**, in Object Explorer, right click **dwhservicexx.database.windows.net** and click on **New Query**.

1. [ ] In **SQL Server Management Studio**, in SQL Editor toolbar, in **Available Databases**, click on **DWDB**.

1. [ ] Create a **master key** against the **DWDB** database. In the query editor, type in the following code:

    ```SQL
    CREATE MASTER KEY;
    ```

1. [ ] Create a database scoped credential named **AzureStorageCredential** with the following details, by typing in the following code:
    - IDENTITY: **MOCID**
    - SECRET: **The access key of your storage account**

    ```SQL
    CREATE DATABASE SCOPED CREDENTIAL AzureStorageCredential
    WITH
    IDENTITY = 'MOCID',
    SECRET = 'Your storage account key'
;
    ```

1. [ ] In **SQL Server Management Studio**, highlight both statements and then click on **Execute**.

1. [ ] In **SQL Server Management Studio**, in the Query window, type in code that will create an external data source named **AzureStorage** for the Blob storage account and data container created in with a type of **HADOOP** that makes use of the ****AzureStorageCredential**

    ```SQL
	CREATE EXTERNAL DATA SOURCE AzureStorage
    WITH (
        TYPE = HADOOP,
        LOCATION = 'abfs://data@awdlsstudcto.dfs.core.windows.net',
        CREDENTIAL = AzureStorageCredential
    );
    ```

1. [ ] In **SQL Server Management Studio**, in the Query window, type in code that will create an external file format named **TextFile** with a formattype of **DelimitedText** and a filed terminator of **comma**.

    ```SQL
    CREATE EXTERNAL FILE FORMAT TextFile
    WITH (
        FORMAT_TYPE = DelimitedText,
        FORMAT_OPTIONS (FIELD_TERMINATOR = ',')
    );
    ```

1. [ ] In **SQL Server Management Studio**, highlight the statement and then click on **Execute**.

1. [ ] In **SQL Server Management Studio**, in the Query window, type in code that will create an external table named **dbo.DimDate2External** with the **location** as the root file, the Data source as **AzureStorage**, the File_format of **TextFile** with the following columns:

    | column name | data type | Nullability|
    |-------------|-----------|------------|
    | Date | datetime2(3) | NULL|
    | DateKey | decimal(38, 0) | NULL|
    | MonthKey | decimal(38, 0) | NULL|
    | Month | nvarchar(100) | NULL|
    | Quarter | nvarchar(100) | NULL|
    | Year | decimal(38, 0) | NULL|
    | Year-Quarter | nvarchar(100) | NULL|
    | Year-Month | nvarchar(100) | NULL|
    | Year-MonthKey | nvarchar(100) | NULL|
    | WeekDayKey| decimal(38, 0) | NULL|
    | WeekDay| nvarchar(100) | NULL|
    | Day Of Month| decimal(38, 0) | NULL|

    ```SQL
	CREATE EXTERNAL TABLE dbo.DimDate2External (
    [Date] datetime2(3) NULL,
    [DateKey] decimal(38, 0) NULL,
    [MonthKey] decimal(38, 0) NULL,
    [Month] nvarchar(100) NULL,
    [Quarter] nvarchar(100) NULL,
    [Year] decimal(38, 0) NULL,
    [Year-Quarter] nvarchar(100) NULL,
    [Year-Month] nvarchar(100) NULL,
    [Year-MonthKey] nvarchar(100) NULL,
    [WeekDayKey] decimal(38, 0) NULL,
    [WeekDay] nvarchar(100) NULL,
    [Day Of Month] decimal(38, 0) NULL
    )
    WITH (
        LOCATION='/DimDate2.txt',
        DATA_SOURCE=AzureStorage,
        FILE_FORMAT=TextFile
    );
    ```

1. [ ] In **SQL Server Management Studio**, highlight the statement and then click on **Execute**.

1. [ ] Test that the table is created by running a select statement against it

    ```SQL
    SELECT * FROM dbo.DimDate2External;
    ```

1. [ ] In **SQL Server Management Studio**, in the Query window, type in a **CTAS** statement that creates a table named **dbo.Dates** with a **columnstore** index and a **distribution** of **round robin** that loads data from the **dbo.DimDate2External** table.

    ```SQL
    CREATE TABLE dbo.Dates
    WITH
    (   
        CLUSTERED COLUMNSTORE INDEX,
        DISTRIBUTION = ROUND_ROBIN
    )
    AS
    SELECT * FROM [dbo].[DimDate2External];
    ```

1. [ ] In **SQL Server Management Studio**, highlight the statement and then click on **Execute**.
 
1. [ ] In **SQL Server Management Studio**, in the Query window, type in a query that creates statistics on the **DateKey**, **Quarter** and **Month** column.

    ```SQL
    CREATE STATISTICS [DateKey] on [Dates] ([DateKey]);
    CREATE STATISTICS [Quarter] on [Dates] ([Quarter]);
    CREATE STATISTICS [Month] on [Dates] ([Month]);
    ```

1. [ ] Test that the table is created by running a select statement against it

    ```SQL
    SELECT * FROM dbo.Dates;
    ```

@@@success
**Result**: After you completed this exercise, you have used PolyBase to load data into a table named Dates from an Azure Blob Store. You have also populated a table named Preferences from Azure Databricks
@@@

@@@success
Congratulations, you have now completed this lab.  You can safely end your lab.
@@@
